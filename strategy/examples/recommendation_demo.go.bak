package main

import (
	"fmt"
	"strings"
	"time"
	
	"changeme/sims"
	"changeme/strategy"
)

func demoRecommendationEngine() {
	fmt.Println("=== AI Race Strategist - Recommendation Engine Demo ===")
	fmt.Println()
	
	// Create recommendation engine with default config
	config := strategy.DefaultConfig()
	engine := strategy.NewRecommendationEngine(config)
	
	fmt.Println("✅ Recommendation engine initialized")
	fmt.Println()
	
	// Simulate a race progression with multiple telemetry samples
	fmt.Println("📊 Simulating race progression...")
	simulateRaceProgression(engine)
	
	// Generate final comprehensive recommendation
	fmt.Println("🧠 Generating comprehensive strategic recommendation...")
	finalData := createRaceScenario()
	recommendation := engine.GenerateRecommendation(finalData)
	
	displayRecommendation(recommendation)
}

func simulateRaceProgression(engine *strategy.RecommendationEngine) {
	// Simulate 15 laps of racing data
	for lap := 1; lap <= 15; lap++ {
		data := createProgressiveRaceData(lap)
		engine.AddTelemetrySnapshot(data)
		
		if lap%5 == 0 {
			fmt.Printf("   Lap %d data processed ✓\n", lap)
		}
	}
	fmt.Println("   Race progression simulation complete")
	fmt.Println()
}

func createProgressiveRaceData(lap int) *sims.TelemetryData {
	// Progressive fuel consumption
	initialFuel := 35.0
	fuelPerLap := 2.2
	currentFuel := initialFuel - (float64(lap-1) * fuelPerLap)
	
	// Progressive tire wear (accelerating wear pattern)
	baseWear := 5.0
	wearProgression := baseWear + (float64(lap-1) * 2.5) + (float64(lap*lap-1) * 0.1)
	
	// Slightly varying lap times with tire degradation
	baseLapTime := time.Minute*1 + time.Second*22 + time.Millisecond*500
	degradationPenalty := time.Duration(float64(wearProgression) * 0.05 * float64(time.Second))
	currentLapTime := baseLapTime + degradationPenalty
	
	return &sims.TelemetryData{
		Timestamp:     time.Now(),
		SimulatorType: sims.SimulatorTypeACC,
		IsConnected:   true,
		Session: sims.SessionInfo{
			Type:             sims.SessionTypeRace,
			TotalLaps:        30,
			TrackName:        "Spa-Francorchamps",
			AirTemperature:   24.0,
			TrackTemperature: 32.0,
			Flag:             sims.SessionFlagGreen,
		},
		Player: sims.PlayerData{
			Position:        5,
			CurrentLap:      lap,
			LastLapTime:     currentLapTime,
			BestLapTime:     baseLapTime,
			CurrentLapTime:  currentLapTime + time.Millisecond*200,
			Fuel: sims.FuelData{
				Level:             currentFuel,
				UsagePerLap:       fuelPerLap,
				EstimatedLapsLeft: int(currentFuel / fuelPerLap),
			},
			Tires: sims.TireData{
				Compound:   "medium",
				FrontLeft:  sims.TireWheelData{WearPercent: wearProgression, Temperature: 88.0},
				FrontRight: sims.TireWheelData{WearPercent: wearProgression + 2, Temperature: 90.0},
				RearLeft:   sims.TireWheelData{WearPercent: wearProgression - 1, Temperature: 85.0},
				RearRight:  sims.TireWheelData{WearPercent: wearProgression + 1, Temperature: 87.0},
			},
			Pit: sims.PitData{
				LastPitLap:        0, // No pit stop yet
				PitWindowOpen:     lap >= 10,
				EstimatedPitTime:  time.Second * 24,
			},
		},
		Opponents: []sims.OpponentData{
			{
				Position:     4,
				DriverName:   "Alex Competitor",
				GapToPlayer:  time.Second * 3,
				LastLapTime:  currentLapTime - time.Millisecond*300,
				LastPitLap:   0,
			},
			{
				Position:     6,
				DriverName:   "Sarah Racer",
				GapToPlayer:  -time.Second * 2,
				LastLapTime:  currentLapTime + time.Millisecond*400,
				LastPitLap:   0,
			},
		},
	}
}

func createRaceScenario() *sims.TelemetryData {
	return &sims.TelemetryData{
		Timestamp:     time.Now(),
		SimulatorType: sims.SimulatorTypeACC,
		IsConnected:   true,
		Session: sims.SessionInfo{
			Type:             sims.SessionTypeRace,
			Format:           sims.RaceFormatUnknown,
			Flag:             sims.SessionFlagGreen,
			TotalLaps:        30,
			LapsRemaining:    15,
			TrackName:        "Spa-Francorchamps",
			TrackLength:      7.004,
			AirTemperature:   24.0,
			TrackTemperature: 32.0,
		},
		Player: sims.PlayerData{
			Position:        5,
			CurrentLap:      15,
			LastLapTime:     time.Minute*1 + time.Second*23 + time.Millisecond*200,
			BestLapTime:     time.Minute*1 + time.Second*22 + time.Millisecond*500,
			CurrentLapTime:  time.Minute*1 + time.Second*23 + time.Millisecond*800,
			GapToLeader:     time.Second * 45,
			GapToAhead:      time.Second * 3,
			GapToBehind:     time.Second * 2,
			Fuel: sims.FuelData{
				Level:             18.2,
				Capacity:          65.0,
				Percentage:        28.0,
				UsagePerLap:       2.2,
				EstimatedLapsLeft: 8,
				LowFuelWarning:    true,
			},
			Tires: sims.TireData{
				Compound:   "medium",
				FrontLeft:  sims.TireWheelData{WearPercent: 52.0, Temperature: 92.0, Pressure: 27.8},
				FrontRight: sims.TireWheelData{WearPercent: 55.0, Temperature: 94.0, Pressure: 27.6},
				RearLeft:   sims.TireWheelData{WearPercent: 48.0, Temperature: 89.0, Pressure: 27.2},
				RearRight:  sims.TireWheelData{WearPercent: 50.0, Temperature: 91.0, Pressure: 27.4},
				WearLevel:  sims.TireWearMedium,
				TempLevel:  sims.TireTempHot,
			},
			Pit: sims.PitData{
				LastPitLap:        0, // No previous pit stop
				PitWindowOpen:     true,
				PitWindowLapsLeft: 8,
				EstimatedPitTime:  time.Second * 24,
				PitSpeedLimit:     60.0,
			},
			Speed:    185.2,
			RPM:      7200,
			Gear:     6,
			Throttle: 85.0,
			Brake:    0.0,
		},
		Opponents: []sims.OpponentData{
			{
				Position:    4,
				DriverName:  "Alex Verstappen",
				CarNumber:   "33",
				CurrentLap:  15,
				GapToPlayer: time.Second * 3,
				LastLapTime: time.Minute*1 + time.Second*22 + time.Millisecond*800,
				BestLapTime: time.Minute*1 + time.Second*22 + time.Millisecond*200,
				LastPitLap:  0, // Haven't pitted
			},
			{
				Position:    6,
				DriverName:  "Sarah Hamilton",
				CarNumber:   "44",
				CurrentLap:  15,
				GapToPlayer: -time.Second * 2,
				LastLapTime: time.Minute*1 + time.Second*23 + time.Millisecond*500,
				BestLapTime: time.Minute*1 + time.Second*22 + time.Millisecond*600,
				LastPitLap:  0, // Haven't pitted
			},
			{
				Position:    3,
				DriverName:  "Max Leclerc",
				CarNumber:   "16",
				CurrentLap:  15,
				GapToPlayer: time.Second * 8,
				LastLapTime: time.Minute*1 + time.Second*22 + time.Millisecond*100,
				BestLapTime: time.Minute*1 + time.Second*21 + time.Millisecond*900,
				LastPitLap:  11, // Recently pitted
			},
		},
	}
}

func displayRecommendation(rec *strategy.StrategicRecommendation) {
	fmt.Println("🏁 Strategic Recommendation Report")
	fmt.Println(strings.Repeat("=", 50))
	fmt.Println()
	
	// Primary Strategy
	fmt.Printf("🎯 Primary Strategy: %s\n", rec.PrimaryStrategy)
	fmt.Printf("📊 Confidence Level: %.1f%%\n", rec.ConfidenceLevel*100)
	fmt.Printf("⚠️  Risk Assessment: %s\n", rec.RiskAssessment)
	fmt.Println()
	
	// Immediate Actions
	fmt.Println("⚡ Immediate Actions:")
	for i, action := range rec.ImmediateActions {
		fmt.Printf("   %d. [%s] %s\n", i+1, action.Priority, action.Action)
		fmt.Printf("      ⏱️  Timing: %s | 🎯 Confidence: %.1f%%\n", action.Timing, action.Confidence*100)
		fmt.Printf("      💡 Rationale: %s\n", action.Rationale)
	}
	fmt.Println()
	
	// Lap Targets
	fmt.Println("🏎️  Lap Time Targets:")
	for scenario, target := range rec.LapTargets {
		fmt.Printf("   %s: %s\n", scenario, formatDuration(target))
	}
	fmt.Println()
	
	// Pit Strategy
	fmt.Println("🔧 Pit Stop Strategy:")
	pit := rec.PitRecommendation
	if pit.ShouldPit {
		fmt.Printf("   ✅ Recommended: YES (Lap %d)\n", pit.OptimalLap)
		fmt.Printf("   🏁 Window closes: Lap %d\n", pit.WindowCloseLap)
		fmt.Printf("   🛞 Tire compound: %s\n", pit.TireCompound)
		fmt.Printf("   ⛽ Fuel load: %.1f liters\n", pit.FuelLoad)
		fmt.Printf("   ⏱️  Time loss: %s\n", formatDuration(pit.EstimatedLoss))
		if len(pit.RiskFactors) > 0 {
			fmt.Printf("   ⚠️  Risk factors:\n")
			for _, risk := range pit.RiskFactors {
				fmt.Printf("      • %s\n", risk)
			}
		}
	} else {
		fmt.Println("   ❌ Not recommended at this time")
	}
	fmt.Println()
	
	// Fuel Management
	fmt.Println("⛽ Fuel Management:")
	fuel := rec.FuelManagement
	fmt.Printf("   Current consumption: %.2f L/lap\n", fuel.CurrentConsumption)
	fmt.Printf("   Target consumption: %.2f L/lap\n", fuel.TargetConsumption)
	if fuel.SaveRequired > 0 {
		fmt.Printf("   ⚠️  Fuel save required: %.2f L/lap\n", fuel.SaveRequired)
		fmt.Println("   💡 Techniques:")
		for _, technique := range fuel.LiftAndCoastZones {
			fmt.Printf("      • Lift and coast: %s\n", technique)
		}
		for _, point := range fuel.ShortShiftPoints {
			fmt.Printf("      • Short shift: %s\n", point)
		}
	} else {
		fmt.Printf("   ✅ Fuel margin available: %.1f L\n", fuel.MarginAvailable)
	}
	fmt.Println()
	
	// Tire Management
	fmt.Println("🛞 Tire Management:")
	tire := rec.TireManagement
	fmt.Printf("   Current degradation: %.3f%%/lap\n", tire.CurrentDegradation*100)
	fmt.Printf("   Optimal stint length: %d laps\n", tire.OptimalStintLength)
	fmt.Printf("   Compound strategy: %s\n", tire.CompoundStrategy)
	if len(tire.ManagementTechniques) > 0 {
		fmt.Println("   💡 Management techniques:")
		for _, technique := range tire.ManagementTechniques {
			fmt.Printf("      • %s\n", technique)
		}
	}
	fmt.Println()
	
	// Threats and Opportunities
	fmt.Println("🎯 Threats & Opportunities:")
	threats := rec.ThreatsAndOpportunities
	if len(threats.ImmediateThreats) > 0 {
		fmt.Println("   ⚠️  Immediate threats:")
		for _, threat := range threats.ImmediateThreats {
			fmt.Printf("      • %s (%s probability, %s severity)\n", 
				threat.Type, formatProbability(threat.Probability), threat.Severity)
			fmt.Printf("        Mitigation: %s\n", threat.Mitigation)
		}
	}
	if len(threats.ImmediateOpportunities) > 0 {
		fmt.Println("   ✨ Immediate opportunities:")
		for _, opp := range threats.ImmediateOpportunities {
			fmt.Printf("      • %s (%s probability)\n", 
				opp.Type, formatProbability(opp.Probability))
			fmt.Printf("        Potential: %s\n", opp.Potential)
		}
	}
	fmt.Printf("   📊 Overall opportunity score: %.1f%%\n", threats.OpportunityScore*100)
	fmt.Println()
	
	// Finish Prediction
	fmt.Println("🏁 Race Finish Prediction:")
	pred := rec.FinishPrediction
	fmt.Printf("   Estimated position: P%d (range: P%d-P%d)\n", 
		pred.EstimatedPosition, pred.PositionRange[0], pred.PositionRange[1])
	if pred.FinishTime > 0 {
		fmt.Printf("   Estimated time to finish: %s\n", formatDuration(pred.FinishTime))
	}
	fmt.Printf("   Prediction confidence: %.1f%%\n", pred.Confidence*100)
	fmt.Println()
	
	// Analysis Meta
	fmt.Printf("📈 Analysis Quality: %.1f%% | Depth: %s\n", 
		rec.DataQuality*100, rec.AnalysisDepth)
	fmt.Printf("⏰ Generated: %s\n", rec.Timestamp.Format("15:04:05"))
	
	fmt.Println()
	fmt.Println("🏆 Recommendation engine demonstration complete!")
}

func formatDuration(d time.Duration) string {
	if d == 0 {
		return "N/A"
	}
	
	minutes := int(d.Minutes())
	seconds := int(d.Seconds()) % 60
	milliseconds := int(d.Milliseconds()) % 1000
	
	if minutes > 0 {
		return fmt.Sprintf("%d:%02d.%03d", minutes, seconds, milliseconds)
	}
	return fmt.Sprintf("%d.%03ds", seconds, milliseconds)
}

func formatProbability(prob float64) string {
	switch {
	case prob > 0.8:
		return "very high"
	case prob > 0.6:
		return "high"
	case prob > 0.4:
		return "medium"
	case prob > 0.2:
		return "low"
	default:
		return "very low"
	}
}
